Description: 解决free-buds耳机连接弹pin码的问题
 增加对于设备名为"FreeBuds 3"的蓝牙设备的特殊处理，
 解决该型号耳机连接时弹pin码的问题
Author: wengyingjie <wengyingjie@uniontech.com>

Origin: https://gerrit.uniontech.com/plugins/gitiles/base/bluez/+/8b6a47818f9fd7bc92b044fcd5ef5a387149b227
Last-Update: 2022-05-20

--- bluez-5.64.orig/src/adapter.c
+++ bluez-5.64/src/adapter.c
@@ -7674,14 +7674,19 @@ static void user_confirm_request_callbac
 		return;
 	}
 
-	err = device_confirm_passkey(device, ev->addr.type, btohl(ev->value),
-							ev->confirm_hint);
-	if (err < 0) {
-		btd_error(adapter->dev_id,
-				"device_confirm_passkey: %s", strerror(-err));
-		btd_adapter_confirm_reply(adapter, &ev->addr.bdaddr,
-							ev->addr.type, FALSE);
-	}
+	if(device_cmp_name(device,"FreeBuds 3")) {
+                btd_error(adapter->dev_id,"FreeBuds 3 device_confirm_passkey: %s", strerror(-err));
+                btd_adapter_confirm_reply(adapter, &ev->addr.bdaddr,ev->addr.type, TRUE);
+        } else {
+                err = device_confirm_passkey(device, ev->addr.type, btohl(ev->value),
+                                                        ev->confirm_hint);
+                if (err < 0) {
+                        btd_error(adapter->dev_id,
+                                        "device_confirm_passkey: %s", strerror(-err));
+                        btd_adapter_confirm_reply(adapter, &ev->addr.bdaddr,
+                                                        ev->addr.type, FALSE);
+                }
+        }
 }
 
 int btd_adapter_passkey_reply(struct btd_adapter *adapter,
--- bluez-5.64.orig/src/device.c
+++ bluez-5.64/src/device.c
@@ -4495,6 +4495,14 @@ void device_get_name(struct btd_device *
 	}
 }
 
+int  device_cmp_name(struct btd_device *device, char *name)
+{
+	DBG("device->name = %s", device->name);
+	if(strncmp(device->name, name, MAX_NAME_LENGTH) == 0)
+		return true;
+	return false;
+}
+
 bool device_name_known(struct btd_device *device)
 {
 	return device->name[0] != '\0';
--- bluez-5.64.orig/src/device.h
+++ bluez-5.64/src/device.h
@@ -43,6 +43,7 @@ void device_remove_bonding(struct btd_de
 void device_remove(struct btd_device *device, gboolean remove_stored);
 int device_address_cmp(gconstpointer a, gconstpointer b);
 int device_bdaddr_cmp(gconstpointer a, gconstpointer b);
+int device_cmp_name(struct btd_device *device, char *name);
 
 /* Struct used by device_addr_type_cmp() */
 struct device_addr_type {
